data("spike")
methylated_spikes <- rownames(spike[spike$methylated == 1,])
sum(spike_data[methylated_spikes])
methyl_spec <- sum(spike_data[methylated_spikes]) / (sum(spike_data))
return(methyl_spec)
}
##Calculate methylation specificity
methyl_spec <- methylation_specificity(bam_info$spikes)
print(methyl_spec)
## reshape the data so that 'id' is the sample
load('../data/dedup.rda')
View(dedup)
colnames(dedup) <- c("frag_grp","sample1","sample2")
spikein_data_melt <- melt(dedup, measure.vars = c('sample1','sample2'))
colnames(spikein_data_melt) <- c("frag_grp", "id", "read_count")
## Build the Gaussian generalized linear model on the spike-in control data
# Generate bland altman plot to visualize the model's performance on the data
gaussian_glm <- model_glm_pmol(spikein_data_melt)
summary(gaussian_glm)
spikein_data <- data.frame(bam_info$spikes)
frag_len <- gsub("[a-zA-Z]","",rownames(spikein_data))
frag_len <- gsub("-\\d","",frag_len)
spikein_data$id <- frag_len
spikein_data$frag_grp <- frag_len
spikein_data <- spikein_data[c(2,3,1)]
colnames(spikein_data) <- c('frag_grp','id','read_count')
## Build the Gaussian generalized linear model on the spike-in control data
# Generate bland altman plot to visualize the model's performance on the data
gaussian_glm <- model_glm_pmol(spikein_data)
summary(gaussian_glm)
## reshape the data so that 'id' is the sample
dedup_path <- system.file("extdata", "dedup.rda", package = "spiky")
load(dedup_path)
dedup_path
## reshape the data so that 'id' is the sample
dedup_path <- system.file("data", "dedup.rda", package = "spiky")
dedup_path
load(dedup_path)
colnames(dedup) <- c("frag_grp","sample1","sample2")
spikein_data_melt <- melt(dedup, measure.vars = c('sample1','sample2'))
colnames(spikein_data_melt) <- c("frag_grp", "id", "read_count")
## Build the Gaussian generalized linear model on the spike-in control data
# Generate bland altman plot to visualize the model's performance on the data
gaussian_glm <- model_glm_pmol(spikein_data)
summary(gaussian_glm)
## Load in deduplicated sequences aligned to the human reference genome
testGR_path <- system.file("data", "testGR.rda", package = "spiky")
load(testGR_path)
sample_data <- as.data.frame(testGR)
sample_data$read_count <- sample_data$score
sample_data$fraglen <- sample_data$width
## Calculate molar amount (picomoles)
sample_data_pmol <- predict_pmol(gaussian_glm, sample_data)
sample_data
guassian_glm
gaussian_glm
sample_data
head(sample_data)
sample_data$GC <- (str_count(sample_data$seq,"G") + str_count(sample_data$seq,"G")) / length(sample_data$seq)
library(stringr)
sample_data$GC <- (str_count(sample_data$seq,"G") + str_count(sample_data$seq,"G")) / length(sample_data$seq)
## Calculate molar amount (picomoles)
sample_data_pmol <- predict_pmol(gaussian_glm, sample_data)
sample_data$CpG_3 <- str_count(sample_data$seq,"CG")
## Calculate molar amount (picomoles)
sample_data_pmol <- predict_pmol(gaussian_glm, sample_data)
head(sample_data_pmol)
sample_binned_data <- bin_pmol(sample_pmol_data)
## Calculate molar amount (picomoles)
sample_data_pmol <- predict_pmol(gaussian_glm, sample_data)
sample_binned_data <- bin_pmol(sample_data_pmol)
sample_data$CpG_3 <- str_count(sample_data$seq,"CG")^(1/3)
## Calculate molar amount (picomoles)
sample_data_pmol <- predict_pmol(gaussian_glm, sample_data)
knitr::opts_chunk$set(echo = TRUE)
#This line takes a couple minutes to run.
#Find the full path on your machine to "example.spike.bam" in spiky/inst/extdata
bam_file_path <- system.file("extdata", "chrom_21_22_with_spikes.bam", package = "spiky")
bam_file_path
#This line takes a couple minutes to run.
#Find the full path on your machine to "example.spike.bam" in spiky/inst/extdata
bam_file_path <- system.file("inst/extdata", "chrom_21_22_with_spikes.bam", package = "spiky")
#Find the full path on your machine to "example.spike.bam" in spiky/inst/extdata
bam_file_path
library(spiky)
system.file("extdata", "chrom_21_22_with_spikes.bam", package = "spiky")
data(spike)
system.file("extdata", "chrom_21_22_with_spikes.bam", package = "spiky")
system.file("inst/extdata", "chrom_21_22_with_spikes.bam", package = "spiky")
system.file("inst/extdata", "2020_Human0.01_test.csv.gz", package = "spiky")
system.file("extdata", "2020_Human0.01_test.csv.gz", package = "spiky")
#This line takes a couple minutes to run.
#Find the full path on your machine to "example.spike.bam" in spiky/inst/extdata
bam_file_path <- system.file("extdata", "chrom_21_22_with_spikes.bam", package = "spiky")
#Find the full path on your machine to "example.spike.bam" in spiky/inst/extdata
bam_file_path
system.file("extdata", "chrom_21_22_with_spikes.bam", package = "spiky")
library(spiky)
system.file("extdata", "chrom_21_22_with_spikes.bam", package = "spiky")
system.file("extdata", "chrom_21_22_with_spikes.bam", package = "spiky")
system.file("extdata", "chrom_21_22_with_spikes.bam", package = "spiky")
library(spiky)
system.file("extdata", "chrom_21_22_with_spikes.bam", package = "spiky")
knitr::opts_chunk$set(echo = TRUE)
#This line takes a couple minutes to run.
#Find the full path on your machine to "example.spike.bam" in spiky/inst/extdata
bam_file_path <- system.file("extdata", "chrom_21_22_with_spikes.bam", package = "spiky")
bam_file_path
data(spike)
bam_info <- scan_spiked_bam(bam_file_path,spike=spike)
##Calculate methylation specificity
methyl_spec <- methylation_specificity(bam_info$spikes)
bam_info$spikes
methylated_spikes <- rownames(spike[spike$methylated == 1,])
spike_data$methylated
spike_data <- bam_info$spikes
spike_data$methylated
methylated_data <- spike_data[spike_data$methylated == 1,])
methylated_data <- spike_data[spike_data$methylated == 1,]
methyl_spec <- sum(methylated_data$coverage) / (sum(spike_data$coverage))
methyl_spec
spike_data$seqnames
seqnames(spike_data)
library(GenomicRanges)
seqnames(spike_data)
spike_data
methylated_data
methylated_data <- spike_data[seqnames(spike_data) %in% methylated_spikes,]
methylated_data
methylated_spikes
seqnames(spike_data)
methylated_data <- spike_data[seqnames(spike_data) %in% methylated_spikes]
methylated_data
as.list(seqnames(spike_data))
spike_data[as.list(seqnames(spike_data)) %in% methylated_spikes]
spike_data[seqnames(spike_data) %in% methylated_spikes]
subset(res$spikes, methylated==0)
subset(spike_data$spikes, methylated==0)
subset(spike_data, methylated==1)
#methylated_spikes <- rownames(spike[spike$methylated == 1,])
methylated_data <-subset(spike_data, methylated==1)
methyl_spec <- sum(methylated_data$coverage) / (sum(spike_data$coverage))
mmethyl_spec
methyl_spec
?covg_to_df
??covg_to_df
?covg_to_df
bam_info
#' compute methylation specificity for spike-in standards
#'
#' In a cfMeDIP experiment, the yield of methylated fragments should be >95%
#' (ideally 98-99%) due to the nature of the assay.
#'
#' @export
methylation_specificity <- function(ssb_res, ...) {
methreads <- covg_to_df(ssb_res, meth=TRUE)$read_count
totalreads <- covg_to_df(ssb_res, meth=FALSE)$read_count
meth_spec <- list("mean" = mean(methreads/totalreads),
"median" = median(methreads/totalreads))
return(meth_spec)
# data("spike")
# methylated_spikes <- rownames(spike[spike$methylated == 1,])
# sum(spike_data[methylated_spikes])
# methyl_spec <- sum(spike_data[methylated_spikes]) / (sum(spike_data))
# return(methyl_spec)
}
methyl_spec <- methylation_specificity(bam_info)
#'
#' @seealso     scan_spiked_bam
#'
#' @examples
#' data(ssb_res, package="spiky")
#' subsetted <- covg_to_df(ssb_res, meth=TRUE)
#' summed <- covg_to_df(ssb_res, meth=FALSE)
#' round((summed$read_count - subsetted$read_count) / summed$read_count, 3)
#'
#' @export
covg_to_df <- function(res, meth=TRUE, ID=NULL) {
if (is.null(ID)) { # mostly to keep from going insane in testing
ID <- paste(toupper(sample(c(letters, 0:9), 4)), collapse="")
}
spikes <- res$spikes
if (!"methylated" %in% names(mcols(spikes))) {
data(spike, package="spiky")
spikes$methylated <- spike[names(spikes), "methylated"]
}
spikes$stub <- sapply(strsplit(names(spikes), "\\-"), `[`, 1)
spikes <- as.data.frame(mcols(spikes[, c("stub","coverage","methylated")]))
spikes$id <- ID
if (meth) {
spikes <- subset(spikes, methylated == 1)
spikes <- spikes[, c("stub", "id", "coverage")]
names(spikes) <- c("frag_grp", "id", "read_count")
} else {
spikes <- data.frame(id=ID,
read_count=tapply(spikes$coverage, spikes$stub, sum))
spikes$frag_grp <- rownames(spikes)
spikes <- spikes[, c("frag_grp", "id", "read_count")]
}
return(spikes[order(spikes$frag_grp), c("frag_grp", "id", "read_count")])
}
methyl_spec <- methylation_specificity(bam_info)
print(methyl_spec)
covg_to_df(bam_info)
model_glm_pmol(covg_to_df(bam_info))
#This line takes a couple minutes to run.
#Find the full path on your machine to "example.spike.bam" in spiky/inst/extdata
bam_file_path <- system.file("extdata", "chrom_21_22_with_spikes.bam", package = "spiky")
bam_file_pat
bam_file_path
##Calculate methylation specificity
methyl_spec <- methylation_specificity(bam_info)
print(methyl_spec)
model_glm_pmol(covg_to_df(ssb_res))
model_glm_pmol(covg_to_df(bam_info))
#'
#' data(spike_read_counts)
#' fit1 <- model_glm_pmol(spike_read_counts)
#'
#' data(ssb_res) # scan_spiked_bam result
#' fit2 <- model_glm_pmol(covg_to_df(ssb_res))
#'
#' @import reshape2
#'
#' @export
model_glm_pmol <- function(x, conc=NULL, ...) {
cols <- c("frag_grp", "id", "read_count")
if (!all(cols %in% names(x))) {
stop("Input data must have columns frag_grp, id, and read_count")
}
x <- add_frag_info(x, "frag_grp") # now exported
x$conc <- .getConcFromFraglen(x$fraglen) # added above
# Adjust for the 0.01ng dilution
x$conc <- x$conc*0.9
# Cube root CpG number to normalize
x$CpG <- as.integer(x$CpG) # this too would be helpful to standardize
x$CpG_3 <- x$CpG ^ (1/3)
# Gaussian model by default -- can alter with ... params
fit <- glm(formula = conc ~ read_count + fraglen + GC + CpG_3, data = x, ...)
r2_gaussian= 1 - (fit$deviance / fit$null.deviance)
attr(fit, "r2_gaussian") <- r2_gaussian #  reprot in summary
attr(fit, "data") <- x
return(fit)
}
# helper function
.getConcFromFraglen <- function(fraglen, concs = NULL) {
if (is.null(concs)) concs <- c("80" = 0.004, "160" = 0.002, "320" = 0.001)
res <- concs[as.character(fraglen)]
# essentially the fallthrough from ifelse
res[is.na(res)] <- concs[length(concs)]
return(res)
}
model_glm_pmol(covg_to_df(bam_info))
x <- covg_to_df(bam_info)
x
cols <- c("frag_grp", "id", "read_count")
if (!all(cols %in% names(x))) {
stop("Input data must have columns frag_grp, id, and read_count")
}
x <- add_frag_info(x, "frag_grp") # now exported
x
library(spiky)
#This line takes a couple minutes to run.
#Find the full path on your machine to "example.spike.bam" in spiky/inst/extdata
bam_file_path <- system.file("extdata", "chrom_21_22_with_spikes.bam", package = "spiky")
knitr::opts_chunk$set(echo = TRUE)
data(spike)
bam_info <- scan_spiked_bam(bam_file_path,spike=spike)
##Calculate methylation specificity
methyl_spec <- methylation_specificity(bam_info)
print(methyl_spec)
model_glm_pmol(covg_to_df(bam_info))
## Build the Gaussian generalized linear model on the spike-in control data
gaussian_glm <- model_glm_pmol(covg_to_df(bam_info))
summary(gaussian_glm)
bam_info
bam_info$genomic$coverage
seq(bam_info$genomic)
sequence(bam_info$genomic)
bam_info
tail(bam_info$genomic)
bam_info$genomic[seqnames(bam_info$genomic) == "chr22"]
chr22 <- bam_info$genomic[seqnames(bam_info$genomic) == "chr22"]
chr22
b <- bam_info$genomic[bam_info$genomic$coverage > 0]
b
bam <- bam_file_path
# scan the BAM (or CRAM if supported) to determine which reads to import
si <- seqinfo_from_header(bam)
spikes <- find_spike_contigs(si, spike=spike)
if (length(spikes) > 0) {
mappings <- attr(spikes, "mappings")
attr(spikes, "mappings") <- NULL
genome(si)[spikes] <- "spike"
} else {
stop(bam, " doesn't appear to have any spike-ins among its contigs.")
}
# properly indexed
bf <- BamFile(bam)
?BamFile
library(Rsamtools)
# properly indexed
bf <- BamFile(bam)
bf
# get a GRanges corresponding to our contig selections for the BAM/CRAM file
gr <- get_merged_gr(si=si, standard=standard) # scanBam positive selections
?get_merged_gr
mapq=20
binwidth=300L
bins=NULL
spike=NULL
how=c("max", "mean")
dupe=FALSE
paired=TRUE
standard=TRUE
# get a GRanges corresponding to our contig selections for the BAM/CRAM file
gr <- get_merged_gr(si=si, standard=standard) # scanBam positive selections
gr
# tabulate spike coverage onto this subset of the filter GRanges from above
spike_gr <- subset(gr, genome(gr)[as(seqnames(gr), "character")] == "spike")
spike_gr
# create appropriate filters for coverage tabulation
fl <- scanBamFlag(isDuplicate=dupe, isPaired=paired, isProperPair=paired, ...)
# create appropriate filters for coverage tabulation
fl <- scanBamFlag(isDuplicate=dupe, isPaired=paired, isProperPair=paired)
bp <- ScanBamParam(flag=fl, which=gr)
bp
bamMapqFilter(bp) <- mapq
# assess coverage on contigs we care about (bin the Rles later)
covg <- get_spiked_coverage(bf=bf, bp=bp, gr=gr)
ccov()
covg
covg$chr22
# bins for coverage
if (is.null(bins)) bins <- tile_bins(gr=gr, binwidth=binwidth)
# genomic coverage is averaged across each bin
binned <- get_binned_coverage(bins, covg)
# spikes get summarized as max or mean across each
spiked <- get_spike_depth(covg, spike_gr, how=how, spike=spike)
spiked
spike_gr
covg
binned
how=c("max", "mean")
spike=NULL
how <- match.fun(match.arg(how))
if (!is(spike, "DFrame")) data(spike)
cols <- colnames(spike)[-1]
canon <- names(spike_gr)
spike_depth <- sapply(covg[seqlevels(spike_gr)], how, na.rm=TRUE)
how=c("max", "mean")
how <- match.fun(match.arg(how))
how = "mean"
how <- match.fun(match.arg(how))
spike_depth <- sapply(covg[seqlevels(spike_gr)], how, na.rm=TRUE)
spike_depth
for (nm in cols) mcols(spike_gr)[[nm]] <- spike[canon, nm]
spike_depth
mcols(spike_gr)
seqinfo(bf)
gr
## Load in deduplicated sequences aligned to the human reference genome
testGR_path <- system.file("data", "testGR.rda", package = "spiky")
load(testGR_path)
sample_data <- as.data.frame(testGR)
sample_data$read_count <- sample_data$score
sample_data$fraglen <- sample_data$width
library(stringr)
sample_data$GC <- (str_count(sample_data$seq,"G") + str_count(sample_data$seq,"G")) /
length(sample_data$seq)
sample_data$CpG_3 <- str_count(sample_data$seq,"CG")^(1/3)
## Calculate molar amount (picomoles)
sample_data_pmol <- predict_pmol(gaussian_glm, sample_data)
sample_data_pmol
sample_binned_data <- bin_pmol(sample_data_pmol)
head(testGR)
getSequence(bam_info$genomic,"hg38")
?getSequence
bam_info$genomic
sample_binned_data <- bin_pmol(bam_file_path)
sample_binned_data <- bin_pmol(bam_file_path)
binwidth = "300L"
sample_binned_data <- bin_pmol(bam_file_path)
x <- bam_file_path
bins=NULL
width=300
mapq=20
stopifnot(file.exists(x))
res <- scan_spiked_bam(x, bins=bins, binwidth=300L, binwidth=width, ...)
res <- scan_spiked_bam(x, bins=bins, binwidth=300L, binwidth=width)
res <- scan_spiked_bam(x, bins=bins, binwidth=width)
bam_info
sample_data
gaussian_glm
bam_info$genomic
si
?ScanBamParam
bp
bp <- ScanBamParam(flag=fl, which=gr, what="sequence")
?scanBamWhat
scanBamWhat()
bp <- ScanBamParam(flag=fl, which=gr, what="seq")
bp
bamMapqFilter(bp) <- mapq
# assess coverage on contigs we care about (bin the Rles later)
covg <- get_spiked_coverage(bf=bf, bp=bp, gr=gr)
ccov()
covg
covg$chr22
# genomic coverage is averaged across each bin
binned <- get_binned_coverage(bins, covg)
# bins for coverage
if (is.null(bins)) bins <- tile_bins(gr=gr, binwidth=binwidth)
tilewidth
binwidth
?tile_bins
?tileGenome
fl
bp
?ScanBamParam
browseVignettes("Rsamtools")
scan_bam <- scanBam(bam, param=param)
scan_bam <- scanBam(bam, param=bp)
scan_bam
data.frame(scan_bam)
fragments_gr <- subset(gr, genome(gr)[as(seqnames(gr), "character")] != "spike")
fragments_gr
fragments_gr <- subset(gr, genome(gr)[as(seqnames(gr), "character")] != "spike")
fragments_bp <- ScanBamParam(flag=fl, which=fragments_gr, what="seq")
scan_bam <- scanBam(bam, param=bp)
scan_bam
subset(scan_bam, genome(gr)[as(seqnames(gr), "character")] != "spike")
fragments <- subset(gr, genome(gr)[as(seqnames(gr), "character")] != "spike")
fragments
fragments <- subset(scan_bam, genome(gr)[as(seqnames(gr), "character")] != "spike")
fragments
head(testGR)
#Load in your bam file using scan_spiked_bam
#ssb_res <- scan_spiked_bam("bam/file/path",spike=spike)
#Example result
ssb_res <- load(system.file("data", "ssb_res.rda", package = "spiky"))
ssb_res
#Load in your bam file using scan_spiked_bam
#ssb_res <- scan_spiked_bam("bam/file/path",spike=spike)
#Example result
load(system.file("data", "ssb_res.rda", package = "spiky"))
ssb_res
show(ssb_res)
#Load in your bam file using scan_spiked_bam
#ssb_res <- scan_spiked_bam("bam/file/path",spike=spike)
#Example result
ssb_res_path <- system.file("data", "ssb_res.rda", package = "spiky")
load(ssb_res_path)
ssb_res
View(ssb_res)
load("~/Desktop/Rotation_Tim_Triche/spiky/spiky/data/ssb_res.rda")
ssb_res
load("~/Desktop/Rotation_Tim_Triche/spiky/spiky/data/ssb_res.rda")
View(res)
res
ssb_res
data(ssb_res, package=“spiky”)
data(ssb_res, package="spiky")
ssb_res
load("data:ssb_res.rda")
load("data/ssb_res.rda")
ssb_res
res
data(ssb_res, package="spiky")
ssb_res
res
load("data/ssb_res.rda")
ssb_res
knitr::opts_chunk$set(echo = TRUE)
library(spiky)
#Load in your bam file using scan_spiked_bam
#ssb_res <- scan_spiked_bam("bam/file/path",spike=spike)
#Example result
ssb_res_path <- system.file("data", "ssb_res.rda", package = "spiky")
load(ssb_res_path)
##Calculate methylation specificity
methyl_spec <- methylation_specificity(ssb_res)
ssb_res
ssb_res_path
load(ssb_res_path)
data(spike)
#Load in your bam file using scan_spiked_bam
#ssb_res <- scan_spiked_bam("bam/file/path",spike=spike)
#Example result
ssb_res_path <- system.file("data", "ssb_res.rda", package = "spiky")
load(ssb_res_path)
res
knitr::opts_chunk$set(echo = TRUE)
library(spiky)
#Load in your bam file using scan_spiked_bam
#ssb_res <- scan_spiked_bam("bam/file/path",spike=spike)
#Example result
ssb_res_path <- system.file("data", "ssb_res.rda", package = "spiky")
load(ssb_res_path)
library(spiky)
#Load in your bam file using scan_spiked_bam
#ssb_res <- scan_spiked_bam("bam/file/path",spike=spike)
#Example result
ssb_res_path <- system.file("data", "ssb_res.rda", package = "spiky")
load(ssb_res_path)
knitr::opts_chunk$set(echo = TRUE)
library(spiky)
#Load in your bam file using scan_spiked_bam
#ssb_res <- scan_spiked_bam("bam/file/path",spike=spike)
#Example result
ssb_res_path <- system.file("data", "ssb_res.rda", package = "spiky")
load(ssb_res_path)
