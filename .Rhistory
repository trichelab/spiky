knitr::opts_chunk$set(echo = TRUE)
#This line takes a couple minutes to run.
#Find the full path on your machine to "example.spike.bam" in spiky/inst/extdata
#bam_file_path <- system.file("extdata", "example.spike.bam", package = "spiky")
bam_info <- scan_spiked_bam("/Users/lauren.harmon/Desktop/Rotation_Tim_Triche/spiky/spikyBAM/chrom_21_22_with_spikes.bam")
knitr::opts_chunk$set(echo = TRUE)
library(spiky)
#This line takes a couple minutes to run.
#Find the full path on your machine to "example.spike.bam" in spiky/inst/extdata
#bam_file_path <- system.file("extdata", "example.spike.bam", package = "spiky")
bam_info <- scan_spiked_bam("/Users/lauren.harmon/Desktop/Rotation_Tim_Triche/spiky/spikyBAM/chrom_21_22_with_spikes.bam")
#This line takes a couple minutes to run.
#Find the full path on your machine to "example.spike.bam" in spiky/inst/extdata
#bam_file_path <- system.file("extdata", "example.spike.bam", package = "spiky")
data(spike)
bam_info <- scan_spiked_bam("/Users/lauren.harmon/Desktop/Rotation_Tim_Triche/spiky/spikyBAM/chrom_21_22_with_spikes.bam",spike=spike)
sapply(res, head, 3)
sapply(bam_info, head, 3)
bam_info
##Calculate methylation specificity
methyl_spec <- methylation_specificity(bam_info$spikes)
print(methyl_spec)
#' compute methylation specificity for spike-in standards
#'
#' In a cfMeDIP experiment, the yield of methylated fragments should be >95%
#' (ideally 98-99%) due to the nature of the assay.
#'
#' @export
methylation_specificity <- function(spike_data, ...) {
data("spike")
methylated_spikes <- rownames(spike[spike$methylated == 1,])
sum(spike_data[methylated_spikes])
methyl_spec <- sum(spike_data[methylated_spikes]) / (sum(spike_data))
return(methyl_spec)
}
##Calculate methylation specificity
methyl_spec <- methylation_specificity(bam_info$spikes)
print(methyl_spec)
## reshape the data so that 'id' is the sample
load('../data/dedup.rda')
View(dedup)
colnames(dedup) <- c("frag_grp","sample1","sample2")
spikein_data_melt <- melt(dedup, measure.vars = c('sample1','sample2'))
colnames(spikein_data_melt) <- c("frag_grp", "id", "read_count")
## Build the Gaussian generalized linear model on the spike-in control data
# Generate bland altman plot to visualize the model's performance on the data
gaussian_glm <- model_glm_pmol(spikein_data_melt)
summary(gaussian_glm)
spikein_data <- data.frame(bam_info$spikes)
frag_len <- gsub("[a-zA-Z]","",rownames(spikein_data))
frag_len <- gsub("-\\d","",frag_len)
spikein_data$id <- frag_len
spikein_data$frag_grp <- frag_len
spikein_data <- spikein_data[c(2,3,1)]
colnames(spikein_data) <- c('frag_grp','id','read_count')
## Build the Gaussian generalized linear model on the spike-in control data
# Generate bland altman plot to visualize the model's performance on the data
gaussian_glm <- model_glm_pmol(spikein_data)
summary(gaussian_glm)
## reshape the data so that 'id' is the sample
dedup_path <- system.file("extdata", "dedup.rda", package = "spiky")
load(dedup_path)
dedup_path
## reshape the data so that 'id' is the sample
dedup_path <- system.file("data", "dedup.rda", package = "spiky")
dedup_path
load(dedup_path)
colnames(dedup) <- c("frag_grp","sample1","sample2")
spikein_data_melt <- melt(dedup, measure.vars = c('sample1','sample2'))
colnames(spikein_data_melt) <- c("frag_grp", "id", "read_count")
## Build the Gaussian generalized linear model on the spike-in control data
# Generate bland altman plot to visualize the model's performance on the data
gaussian_glm <- model_glm_pmol(spikein_data)
summary(gaussian_glm)
## Load in deduplicated sequences aligned to the human reference genome
testGR_path <- system.file("data", "testGR.rda", package = "spiky")
load(testGR_path)
sample_data <- as.data.frame(testGR)
sample_data$read_count <- sample_data$score
sample_data$fraglen <- sample_data$width
## Calculate molar amount (picomoles)
sample_data_pmol <- predict_pmol(gaussian_glm, sample_data)
sample_data
guassian_glm
gaussian_glm
sample_data
head(sample_data)
sample_data$GC <- (str_count(sample_data$seq,"G") + str_count(sample_data$seq,"G")) / length(sample_data$seq)
library(stringr)
sample_data$GC <- (str_count(sample_data$seq,"G") + str_count(sample_data$seq,"G")) / length(sample_data$seq)
## Calculate molar amount (picomoles)
sample_data_pmol <- predict_pmol(gaussian_glm, sample_data)
sample_data$CpG_3 <- str_count(sample_data$seq,"CG")
## Calculate molar amount (picomoles)
sample_data_pmol <- predict_pmol(gaussian_glm, sample_data)
head(sample_data_pmol)
sample_binned_data <- bin_pmol(sample_pmol_data)
## Calculate molar amount (picomoles)
sample_data_pmol <- predict_pmol(gaussian_glm, sample_data)
sample_binned_data <- bin_pmol(sample_data_pmol)
sample_data$CpG_3 <- str_count(sample_data$seq,"CG")^(1/3)
## Calculate molar amount (picomoles)
sample_data_pmol <- predict_pmol(gaussian_glm, sample_data)
